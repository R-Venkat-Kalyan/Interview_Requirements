Functions: Pass by value and pass by reference
Built in classes like System


Pattern 1:
import java.util.Scanner;
public class MyClass {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    for(int i = 1;i <= n;i++){
        for(int j = 1;j <= i;j++){
            System.out.print(j+" ");
        }
        System.out.println();
    }
  }
}

5
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 



Pattern 2: 
for(int i = 1;i <= n;i++){
        for(int j = 1;j <= i;j++){
            System.out.print(i+" ");
        }
        System.out.println();
    }

5
1 
2 2 
3 3 3 
4 4 4 4 
5 5 5 5 5 


Pattern 3:
for(int i = n;i >= 1;i--){
        for(int j = 1;j <= i;j++){
            System.out.print(j);
        }
        System.out.println();
    }

5
12345
1234
123
12
1



Pattern 4:
for(int i = 0;i < n;i++){
       for(int j = 0;j < n-i-1;j++){
           System.out.print(" ");
       }
       for(int j = 0; j < 2*i+1;j++){
           System.out.print("*");
       }
       for(int j = 0;j < n-i-1;j++){
           System.out.print(" ");
       }
       System.out.println();
   }


5
    *    
   ***   
  *****  
 ******* 
*********


							Sorting
							----------
🛠️ 2. Inbuilt sort is highly optimized
Java’s Arrays.sort() for primitives uses Dual-Pivot QuickSort, an optimized variant.

For objects, it uses TimSort — a hybrid of Merge and Insertion Sort (used in Python too).

These are heavily engineered, tested, and tuned for performance and memory efficiency — far beyond what we write in an interview.


							Arrays
							--------

Push Zeros
---------------
static void pushZerosToEnd(int arr[], int n) {
		
		int count = 0;
		for (int i = 0; i < n; i++) {
			if (arr[i] != 0)
				arr[count++] = arr[i];
		}
		for (int i = count; i < n; i++)
			arr[i] = 0;
		System.out.println(Arrays.toString(arr));
	}

static void pushZerosToStart(int arr[], int n) {
	int count = n - 1;

	// Traverse array from end and move non-zero elements to the back
	for (int i = n - 1; i >= 0; i--) {
		if (arr[i] != 0)
			arr[count--] = arr[i];
	}

	// Fill remaining positions with 0
	while (count >= 0)
		arr[count--] = 0;

	System.out.println(Arrays.toString(arr));
}
}



Number Systems
-----------------------
public static void main(String[] args) { 
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String bin = Integer.toBinaryString(n);
    char ch[] = bin.toCharArray();
    for(int i = 0;i < ch.length;i++){
        if(ch[i] == '1')
            ch[i] = '0';
        else if(ch[i] == '0')
            ch[i] = '1';
    }
    String ans = new String(ch);
    int dec = Integer.parseInt(ans,2);
    String hex = Integer.toHexString(dec);
    String oct = Integer.toOctalString(dec);
    System.out.println(dec+" "+hex+" "+oct);

}



Char To Integer
---------------------
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        int ans = 1;
        for(int i = 0;i < s.length();i++){
            int val = s.charAt(i) - '0';
            ans *= val;
        }
        System.out.println(ans);
    }


Rotate Array
-----------------
    public static void rotateArray(int arr[], int n, int d) {
        // Handle cases where d > n by taking modulus (in case d > n)
        d = d % n;

        // Step 1: Reverse the first d elements (from index 0 to d-1)
        // For example, if d=2 and arr[] = {1, 2, 3, 4, 5}, after this step arr[] = {2, 1, 3, 4, 5}
        rotate(arr, 0, d - 1);

        // Step 2: Reverse the remaining elements (from index d to n-1)
        // Continuing from the previous step, if arr[] = {2, 1, 3, 4, 5}, after this step arr[] = {2, 1, 5, 4, 3}
        rotate(arr, d, n - 1);

        // Step 3: Reverse the entire array (from index 0 to n-1)
        // Finally, if arr[] = {2, 1, 5, 4, 3}, after this step arr[] = {3, 4, 5, 1, 2}, which is the rotated array
        rotate(arr, 0, n - 1);
    }

    public static void rotate(int arr[], int start,int end){
        while(start < end){
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
    

