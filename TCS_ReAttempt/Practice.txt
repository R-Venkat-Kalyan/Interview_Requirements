Functions: Pass by value and pass by reference
Built in classes like System


Pattern 1:
import java.util.Scanner;
public class MyClass {
  public static void main(String args[]) {
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    for(int i = 1;i <= n;i++){
        for(int j = 1;j <= i;j++){
            System.out.print(j+" ");
        }
        System.out.println();
    }
  }
}

5
1 
1 2 
1 2 3 
1 2 3 4 
1 2 3 4 5 



Pattern 2: 
for(int i = 1;i <= n;i++){
        for(int j = 1;j <= i;j++){
            System.out.print(i+" ");
        }
        System.out.println();
    }

5
1 
2 2 
3 3 3 
4 4 4 4 
5 5 5 5 5 


Pattern 3:
for(int i = n;i >= 1;i--){
        for(int j = 1;j <= i;j++){
            System.out.print(j);
        }
        System.out.println();
    }

5
12345
1234
123
12
1



Pattern 4:
for(int i = 0;i < n;i++){
       for(int j = 0;j < n-i-1;j++){
           System.out.print(" ");
       }
       for(int j = 0; j < 2*i+1;j++){
           System.out.print("*");
       }
       for(int j = 0;j < n-i-1;j++){
           System.out.print(" ");
       }
       System.out.println();
   }


5
    *    
   ***   
  *****  
 ******* 
*********


							Sorting
							----------
üõ†Ô∏è 2. Inbuilt sort is highly optimized
Java‚Äôs Arrays.sort() for primitives uses Dual-Pivot QuickSort, an optimized variant.

For objects, it uses TimSort ‚Äî a hybrid of Merge and Insertion Sort (used in Python too).

These are heavily engineered, tested, and tuned for performance and memory efficiency ‚Äî far beyond what we write in an interview.


							Arrays
							--------

Push Zeros
---------------
static void pushZerosToEnd(int arr[], int n) {
		
		int count = 0;
		for (int i = 0; i < n; i++) {
			if (arr[i] != 0)
				arr[count++] = arr[i];
		}
		for (int i = count; i < n; i++)
			arr[i] = 0;
		System.out.println(Arrays.toString(arr));
	}

static void pushZerosToStart(int arr[], int n) {
	int count = n - 1;

	// Traverse array from end and move non-zero elements to the back
	for (int i = n - 1; i >= 0; i--) {
		if (arr[i] != 0)
			arr[count--] = arr[i];
	}

	// Fill remaining positions with 0
	while (count >= 0)
		arr[count--] = 0;

	System.out.println(Arrays.toString(arr));
}
}



Number Systems
-----------------------
public static void main(String[] args) { 
    Scanner sc = new Scanner(System.in);
    int n = sc.nextInt();
    String bin = Integer.toBinaryString(n);
    char ch[] = bin.toCharArray();
    for(int i = 0;i < ch.length;i++){
        if(ch[i] == '1')
            ch[i] = '0';
        else if(ch[i] == '0')
            ch[i] = '1';
    }
    String ans = new String(ch);
    int dec = Integer.parseInt(ans,2);
    String hex = Integer.toHexString(dec);
    String oct = Integer.toOctalString(dec);
    System.out.println(dec+" "+hex+" "+oct);

}



Char To Integer
---------------------
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String s = sc.next();
        int ans = 1;
        for(int i = 0;i < s.length();i++){
            int val = s.charAt(i) - '0';
            ans *= val;
        }
        System.out.println(ans);
    }


Rotate Array
-----------------
    public static void rotateArray(int arr[], int n, int d) {
        // Handle cases where d > n by taking modulus (in case d > n)
        d = d % n;

        // Step 1: Reverse the first d elements (from index 0 to d-1)
        // For example, if d=2 and arr[] = {1, 2, 3, 4, 5}, after this step arr[] = {2, 1, 3, 4, 5}
        rotate(arr, 0, d - 1);

        // Step 2: Reverse the remaining elements (from index d to n-1)
        // Continuing from the previous step, if arr[] = {2, 1, 3, 4, 5}, after this step arr[] = {2, 1, 5, 4, 3}
        rotate(arr, d, n - 1);

        // Step 3: Reverse the entire array (from index 0 to n-1)
        // Finally, if arr[] = {2, 1, 5, 4, 3}, after this step arr[] = {3, 4, 5, 1, 2}, which is the rotated array
        rotate(arr, 0, n - 1);
    }

    public static void rotate(int arr[], int start,int end){
        while(start < end){
            int temp = arr[start];
            arr[start] = arr[end];
            arr[end] = temp;
            start++;
            end--;
        }
    }
    


Longest Subarray with given sum
-----------------------------------------------
 public static int getLongestSubarray(int []a, long k) {
        int n = a.length; // size of the array.

        int len = 0;
        for (int i = 0; i < n; i++) { // starting index
            long s = 0; // Sum variable
            for (int j = i; j < n; j++) { // ending index
                // add the current element to
                // the subarray a[i...j-1]:
                s += a[j];

                if (s == k)
                    len = Math.max(len, j - i + 1);
            }
        }
        return len;
    }


Max Sub Array Sum: Kadane
----------------------------------------
static int maxSubarraySum(int[] arr) {
        int res = arr[0];
        int maxEnding = arr[0];

        for (int i = 1; i < arr.length; i++) {
            
            // Find the maximum sum ending at index i by either extending 
            // the maximum sum subarray ending at index i - 1 or by
            // starting a new subarray from index i
            maxEnding = Math.max(maxEnding + arr[i], arr[i]);
          
            // Update res if maximum subarray sum ending at index i > res
            res = Math.max(res, maxEnding);
        }
        return res;
    }




							Questions
							--------------
HR / Behavioral
----------------------
Tell me about yourself and your journey as a Full-Stack Developer.
Why do you want to join TCS Prime?
What do you know about TCS Prime and its objectives?
Walk me through a challenge you faced on a team project and how you resolved it.
Describe a time you had to learn a new technology quickly.
How do you prioritize tasks when working under tight deadlines?
What are your greatest strengths and weaknesses?
Give an example of when you took initiative beyond your assigned role.
How do you handle feedback and criticism?
Where do you see yourself in 5 years?

Education & Certifications
-------------------------------------
You graduated with a 9.46 CGPA‚Äîhow did you maintain this performance?
What core subjects in your B.Tech prepared you for software development?
Tell us about your AWS Certified Cloud Practitioner certification‚Äîwhat did you learn?
How has your HackerRank 3-star Java rating influenced your coding practice?

Experience (GenC Intern at Cognizant)
------------------------------------------------------
What is Pega? Explain Pega case management and its use cases.
How did you expose RESTful web services in your Pega project?
What were the 4 user stages and 7 processes in your Insurance Claim Management type?
How did your contribution improve claims-processing efficiency?
Describe how you collaborated with peers or stakeholders during that internship.

Projects Deep-Dive
--------------------------
Task Prompter (Spring Boot, MongoDB, OAuth)
Architecture: How did you structure the backend and database?
Explain how you implemented Google and email login using OAuth.
Describe your REST API endpoints for scheduling, updating, deleting tasks.
How did you ensure security (validation, authorization, data protection)?
What was your approach to send email reminders?
How did you measure ‚Äú30% improvement in task efficiency‚Äù?
What challenges did you face integrating MongoDB and how did you resolve them?

Counseling Management System (Spring Boot, MySQL)
Explain your database schema for student-counselor interactions.
How did you implement session management for concurrent users?
What Agile practices did you follow?
How did you track and improve the 25% increase in student engagement?
Describe a bug or performance issue you fixed in this app.

Online Notes App (React, FlipHTML5)
How did you integrate FlipHTML5 into a React app?
Describe your component hierarchy and state management.
How did you load and render PDFs interactively?
What optimizations did you make for performance or UX?

Technical / Domain
---------------------------
Core Programming (Java, Python, C)
Compare Java and Python in terms of memory management.
Explain OOP concepts and give examples in your projects.
How do you handle exceptions in Java?
Write (or describe) a function to reverse a linked list.
Web Development (HTML, Bootstrap, Spring Boot)
What is the Spring Bean lifecycle?
Explain dependency injection and inversion of control in Spring.
How do you make a REST controller in Spring Boot?
How does Bootstrap‚Äôs grid system work?

Databases (MySQL, MongoDB)
When would you choose MongoDB over MySQL?
Explain indexing in MongoDB and when to use capped collections.
How do you design a relational schema for many-to-many relationships?
Describe ACID properties and how MySQL enforces them.

DevOps & Cloud (Git, Maven, EC2, S3, Docker, Kubernetes)
Walk through your Git branching and merge strategy.
How did you containerize an application with Docker?
Explain how you would deploy your Spring Boot app on EC2 and S3.
What are Kubernetes pods, deployments, and services?

REST & Web Services
What is the difference between PUT and PATCH?
How do you secure REST APIs?
Explain CORS and how to configure it in Spring Boot.

System Design & High-Level Scenarios
-----------------------------------------------------
Design a task-management system for 1M users. Discuss components and flows.
How would you scale your Notes App to handle large volumes of PDF traffic?
Outline a microservices architecture for the Counseling System.
How would you migrate a monolithic Spring Boot app to Kubernetes?

Problem-Solving & Algorithms
-------------------------------------------
Describe your approach to solve ‚Äútwo-sum‚Äù in an array. 
How do you optimize a slow SQL query?
Explain Big O notation for common data structures (ArrayList, HashMap).
Given a graph, how would you detect a cycle?

 
Self Intro
------------
My name is Reddy Venkat Kalyan, a Computer Science and Engineering graduate from KL University. 
I‚Äôve recently completed my final semester examinations and am currently waiting for the results.

I‚Äôm a multilingual Full Stack Developer who can work with the Spring Boot framework for backend development. 
On the frontend, I use HTML5, Tailwind CSS, and Bootstrap to build clean and responsive user interfaces. 
For data storage, I work with both MySQL and MongoDB, depending on the project requirements.

I‚Äôve built several web-based projects aimed at solving real-world problems faced by me or those around me. 
These include Task Prompter, a tool for sc heduling tasks and sending reminders; a Counseling Management System to support
student and administrator interactions; and an Online Notes App to make academic materials easily accessible.

I use Git and GitHub to push and manage my code regularly, and I am familiar with basic version control operations. 
I believe that being able to work across different technologies, even with just foundational knowledge, is essential. 
I also rely on AI tools like ChatGPT and GitHub Copilot to support my learning and speed up development, as it's not practical for 
anyone to remember every detail.

During my final semester, I interned at Cognizant Technology Solutions in the Pega domain, 
where I contributed to the development of an Insurance Claim Management System. 
This application helped streamline the claims process within a financial platform using Pega's low-code tools.
The internship gave me an opportunity to understand how large-scale systems function in a corporate setting and showed 
me how collaboration with colleagues plays a key role in delivering effective solutions. It was a valuable experience that gave me
exposure to real-time development workflows.

Overall, I‚Äôm someone who likes building useful things, keeps learning through hands-on practice, and is eager to grow by
contributing to meaningful work in a collaborative environment like TCS Prime.



Why Prime
---------------
TCS Prime offers an excellent opportunity for engineers to work on cutting-edge projects, emphasizing learning and leadership. 
It aligns with my drive to grow in a structured yet innovation-driven environment boosting my skills.

What Is Prime
--------------------
TCS prime is one of the jo roles offered to candidates based on their score in NQT recruitment test.
TCS usually used to hire for two roles namely known as Ninja & Digital and in the recent years it included this prime role
which provides the opportuinity for graduates to work on cutting edge technologies.


Python vs Java
--------------------
Java uses generational garbage collection via the JVM.
Python uses reference counting with cyclic garbage collection.
Java allows more tuning and control over memory (via JVM options).
Python offers simpler memory handling but less manual control.
Java is generally better for memory-intensive, large-scale apps.


OOP Concepts with Project Examples
----------------------------------------------------
Encapsulation:
In my Task Prompter project, each task was represented by a Task class with private fields like title, dueDate, and 
public getters/setters to access them.

Inheritance:
In my Spring Boot projects, I created a BaseEntity class with common fields like id, createdAt, which were extended by multiple 
entity classes like User, Task, etc.

Polymorphism:
In my Counseling System, I used interfaces like UserService with multiple implementations (for students and admins), allowing
flexible service logic.

Abstraction:
In all backend APIs, I exposed only required endpoints to the frontend while hiding the business logic inside service classes.


Handling Exceptions in Java
---------------------------------------
I use try-catch blocks to handle specific exceptions like NullPointerException, IOException, etc.
For REST APIs, I implement global exception handling using
@ControllerAdvice and @ExceptionHandler to return proper HTTP status and messages.


When to choose MongoDB over MySQL
-------------------------------------------------------
Choose MongoDB when:
You need to store unstructured or flexible data (e.g., JSON-like documents).
Schema may evolve frequently (no fixed schema).
You require faster development with nested or hierarchical data.
You're building real-time apps like chat systems, content management, or IoT apps.


Indexing in MongoDB and Capped Collections
-----------------------------------------------------------------
Indexing in MongoDB improves query performance by allowing faster data retrieval.
The default _id index is created automatically.
You can add indexes on fields using db.collection.createIndex({ field: 1 }).
Use indexes on frequently queried or sorted fields to avoid full collection scans.

Capped Collections are fixed-size collections that overwrite oldest documents when full.
Best used for logging, caching, or sensor data where recent entries matter.
They preserve insertion order and have fast writes.

