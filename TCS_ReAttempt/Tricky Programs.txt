// 1. Swap two numbers without using a third variable (Using XOR)
int a = 5, b = 7;
a = a ^ b;
b = a ^ b;
a = a ^ b;

// 2. Add two numbers without using '+'
int add(int x, int y) {
    while (y != 0) {
        int carry = x & y;
        x = x ^ y;
        y = carry << 1;
    }
    return x;
}

// 3. Check if a number is a power of 2
boolean isPowerOfTwo(int n) {
    return n > 0 && (n & (n - 1)) == 0;
}

// 4. Find non-repeating element in array
int findUnique(int[] arr) {
    int res = 0;
    for (int num : arr) res ^= num;
    return res;
}

// 5. Count number of 1s in binary representation
int countOnes(int n) {
    int count = 0;
    while (n != 0) {
        count += n & 1;
        n >>= 1;
    }
    return count;
}

// 6. Reverse bits of a number
int reverseBits(int n) {
    int result = 0;
    for (int i = 0; i < 32; i++) {
        result <<= 1;
        result |= (n & 1);
        n >>= 1;
    }
    return result;
}

// 7. Division without using / * %
int divide(int dividend, int divisor) {
    int quotient = 0;
    int sign = (dividend < 0) ^ (divisor < 0) ? -1 : 1;
    dividend = Math.abs(dividend);
    divisor = Math.abs(divisor);
    while (dividend >= divisor) {
        dividend -= divisor;
        quotient++;
    }
    return sign * quotient;
}

// 8. Reverse a string without in-built methods
String reverse(String str) {
    char[] ch = str.toCharArray();
    int i = 0, j = ch.length - 1;
    while (i < j) {
        char temp = ch[i];
        ch[i] = ch[j];
        ch[j] = temp;
        i++; j--;
    }
    return new String(ch);
}

// 9. First non-repeating character
char firstNonRepeating(String str) {
    int[] freq = new int[256];
    for (char c : str.toCharArray()) freq[c]++;
    for (char c : str.toCharArray()) if (freq[c] == 1) return c;
    return '_';
}

// 10. Anagram check without sorting
boolean isAnagram(String s1, String s2) {
    if (s1.length() != s2.length()) return false;
    int[] count = new int[256];
    for (int i = 0; i < s1.length(); i++) {
        count[s1.charAt(i)]++;
        count[s2.charAt(i)]--;
    }
    for (int c : count) if (c != 0) return false;
    return true;
}

// 11. Custom atoi
int myAtoi(String str) {
    int res = 0, i = 0, sign = 1;
    if (str.charAt(0) == '-') {
        sign = -1;
        i++;
    }
    for (; i < str.length(); i++) {
        res = res * 10 + (str.charAt(i) - '0');
    }
    return res * sign;
}

// 12. Rotate array to the right by k steps without extra space
void rotate(int[] nums, int k) {
    k = k % nums.length;
    reverse(nums, 0, nums.length - 1);
    reverse(nums, 0, k - 1);
    reverse(nums, k, nums.length - 1);
}

void reverse(int[] nums, int start, int end) {
    while (start < end) {
        int temp = nums[start];
        nums[start] = nums[end];
        nums[end] = temp;
        start++; end--;
    }
}

// 13. Find missing number from 1 to N
int findMissing(int[] arr, int n) {
    int sum = n * (n + 1) / 2;
    for (int num : arr) sum -= num;
    return sum;
}

// 14. Fibonacci without recursion
void printFibonacci(int n) {
    int a = 0, b = 1;
    for (int i = 0; i < n; i++) {
        System.out.print(a + " ");
        int temp = a + b;
        a = b;
        b = temp;
    }
}

// 15. Check number palindrome without string conversion
boolean isPalindrome(int n) {
    int original = n, rev = 0;
    while (n > 0) {
        rev = rev * 10 + n % 10;
        n /= 10;
    }
    return original == rev;
}

// 16. GCD without library
int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

// 17. Convert number to binary
String toBinary(int n) {
    StringBuilder sb = new StringBuilder();
    while (n > 0) {
        sb.append(n % 2);
        n /= 2;
    }
    return sb.reverse().toString();
}

// 18. Check if number is prime
boolean isPrime(int n) {
    if (n <= 1) return false;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) return false;
    }
    return true;
}
